"use strict";

var h = require("virtual-dom/h");

var diff = require("virtual-dom/diff");

var patch = require("virtual-dom/patch");

var createElement = require("virtual-dom/create-element");

if (!Object.keys) {
    Object.keys = function() {
        "use strict";
        var hasOwnProperty = Object.prototype.hasOwnProperty, hasDontEnumBug = !{
            toString: null
        }.propertyIsEnumerable("toString"), dontEnums = [ "toString", "toLocaleString", "valueOf", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "constructor" ], dontEnumsLength = dontEnums.length;
        return function(obj) {
            if (typeof obj !== "object" && (typeof obj !== "function" || obj === null)) {
                throw new TypeError("Object.keys called on non-object");
            }
            var result = [], prop, i;
            for (prop in obj) {
                if (hasOwnProperty.call(obj, prop)) {
                    result.push(prop);
                }
            }
            if (hasDontEnumBug) {
                for (i = 0; i < dontEnumsLength; i++) {
                    if (hasOwnProperty.call(obj, dontEnums[i])) {
                        result.push(dontEnums[i]);
                    }
                }
            }
            return result;
        };
    }();
}

String.prototype.toCamelCase = function() {
    return this.toLowerCase().replace(/\s(.)/g, function($1) {
        return $1.toUpperCase();
    }).replace(/\s/g, "");
};

function addEvent(evt, element, fnc) {
    return element.addEventListener ? element.addEventListener(evt, fnc, false) : element.attachEvent("on" + evt, fnc);
}

function removeEvent(evt, element, fnc) {
    return element.removeEventListener ? element.removeEventListener(evt, fnc, false) : element.detachEvent("on" + evt, fnc);
}

function loadingSomething(status, target) {
    if (status === true) {
        item.inTransition[target] = true;
        if (regLoading.test(target.className) === false) {
            target.className += " loading";
        }
    } else {
        setTimeout(function() {
            item.inTransition[target] = false;
            target.className = target.className.replace(regLoading, "");
        }, 200);
    }
}

function connError(error) {
    console.log("error connecting - " + error);
}

var regLoading = / ?loading/g, regFullPage = / ?fullPage/g, regCheatSheet = / ?cheatSheet/g, regNoChange = / ?nochange/g, sitePath = "/kj/kx7/PublicHealth/", pageDOM = new Tree({
    wrapper: {
        type: "div",
        id: "wrapper"
    },
    content: {
        type: "div",
        id: "content",
        className: "fullPage",
        parentNode: "wrapper"
    },
    buttons: {
        type: "div",
        id: "buttons",
        parentNode: "content",
        before: "contentWrap"
    },
    contentWrap: {
        type: "div",
        id: "contentWrap",
        parentNode: "content",
        before: "modalOverlay",
        after: "buttons"
    },
    output: {
        type: "div",
        id: "output",
        parentNode: "contentWrap",
        after: "input"
    },
    modalOverlay: {
        type: "div",
        id: "modalOverlay",
        parentNode: "content",
        after: "*"
    },
    menuItems: {
        type: "select",
        parentNode: "modal",
        before: "modalButtons",
        after: "modalTitleInput"
    },
    menuGroup: {
        type: "optgroup",
        parentNode: "menuItems"
    }
}), md = markdownit({
    highlight: function(code, lang) {
        if (lang && hljs.getLanguage(lang)) {
            try {
                return hljs.highlight(lang, code).value;
            } catch (e) {}
        }
        return "";
    }
}), pages = {}, $contentWrap = $(contentWrap), buttons, editor, inTransition = {}, animating = false, item;

function Item(page) {
    return {
        page: page,
        init: function() {
            this.id = this.page.id || -1;
            this.title = this.page.title || "";
            this.text = this.page.text || "";
            this.references = this.page.references || [];
            this.category = this.page.category || [];
            this.originalTitle = this.page.title || "";
            this.originalText = this.page.text || "";
            this.contentType = this.page.contentType || "Content";
            this.listItemType = this.page.listItemType || "";
            this.timestamp = this.page.timestamp || null;
        },
        update: function(data) {
            for (var label in data) {
                if (this.hasOwnProperty(label)) {
                    this[label] = data[label];
                }
            }
        }
    };
}

function pageSetup(rootNode) {
    try {
        var wrapperTmp = document.getElementById("wrapper");
        wrapperTmp.parentNode.replaceChild(rootNode, wrapperTmp);
    } catch (e) {
        try {
            wrapperTmp = document.getElementById("content");
            wrapperTmp.style.display = "none";
            wrapperTmp.parentNode.appendChild(rootNode);
        } catch (err) {
            document.body.appendChild(rootNode);
        }
    }
    try {
        var leftNav = document.getElementById("leftnav");
        leftNav.parentNode.removeChild(leftNav);
    } catch (e) {}
}

function newModal(options, cb) {
    try {
        destroyModal();
    } catch (e) {}
    if ("function" !== typeof cb) {
        cb = null;
    }
    var modalTitleInput, modalCategorySelect, modalOverlay = document.createElement("div"), $modalOverlay = $(modalOverlay), modalBg = document.createElement("div"), header = document.createElement("div"), label = document.createElement("label"), modal = document.createElement("div"), modalButtons = document.createElement("div"), okButton = document.createElement("div"), okSpan = document.createElement("span"), cancelButton = document.createElement("div"), cancelSpan = document.createElement("span"), opts = {
        title: options.title || "## Info",
        text: options.text || "Click OK to continue",
        type: options.type || "success",
        okText: options.okText || "OK!",
        showCancelButton: typeof options.showCancelButton === "boolean" ? options.showCancelButton : true,
        closeOnConfirm: typeof options.closeOnConfirm === "boolean" ? options.closeOnConfirm : true
    };
    modalOverlay.id = "modalOverlay";
    modalOverlay.className = "modalOverlay " + opts.type;
    modalBg.id = "modalBg";
    modalBg.className = "modalBg";
    modal.id = "modal";
    modal.className = "modal";
    okButton.className = "btn";
    okButton.id = "okButton";
    modalButtons.className = "modalButtons";
    header.className = "header";
    header.innerHTML = md.render(opts.title);
    label.innerHTML = md.render(opts.text);
    label.setAttribute("for", "modalTitleInput");
    modal.appendChild(header);
    modal.appendChild(label);
    if (opts.type === "new") {
        modalTitleInput = document.createElement("input");
        modalTitleInput.id = "modalTitleInput";
        modalTitleInput.name = "titleInput";
        modalTitleInput.setAttribute("type", "text");
        modalTitleInput.setAttribute("tab-index", "1");
        modalCategorySelect = menuItems;
        modalCategorySelect.id = "modalCategorySelect";
        modalCategorySelect.name = "root";
        modal.appendChild(modalTitleInput);
        modal.appendChild(modalCategorySelect);
    }
    okSpan.appendChild(txt(opts.okText));
    okButton.appendChild(okSpan);
    modalButtons.appendChild(okButton);
    if (opts.showCancelButton !== false) {
        cancelSpan.appendChild(txt("Nope."));
        cancelButton.className = "btn";
        cancelButton.id = "cancelButton";
        cancelButton.appendChild(cancelSpan);
        modalButtons.appendChild(cancelButton);
    }
    modal.appendChild(modalButtons);
    modalOverlay.appendChild(modalBg);
    modalOverlay.appendChild(modal);
    modalOverlay.style.opacity = 0;
    addEvent("click", modalBg, handleCancel);
    if (opts.type === "new") {
        modalTitleInput.focus();
        addEvent("keyup", modalTitleInput, handleOk);
        addEvent("keyup", modalCategorySelect, handleOk);
        addEvent("change", modalTitleInput, handleOk);
        addEvent("change", modalCategorySelect, handleOk);
    }
    addEvent("click", okButton, handleOk);
    if (opts.showCancelButton !== false) {
        addEvent("click", cancelButton, handleCancel);
    }
    addEvent("keyup", document, handleCancel);
    content.appendChild(modalOverlay);
    $modalOverlay.velocity({
        opacity: 1
    }, {
        duration: 75,
        display: "block"
    });
    function handleAppend(event) {
        event = event || window.event;
        event.preventDefault ? event.preventDefault() : event.returnValue = false;
        var val = {
            title: modalTitleInput.value.trim(),
            rootCategory: modalCategorySelect.value
        };
        pathLabel.innerHTML = val.rootCategory + "/" + val.title.toCamelCase();
        return false;
    }
    function handleOk(event) {
        event = event || window.event;
        event.preventDefault ? event.preventDefault() : event.returnValue = false;
        var keyCode = event.keyCode || event.which || event.charCode || null, val;
        if (keyCode === 13 || event.type === "click") {
            if (!cb) {
                destroyModal();
                return true;
            }
            if (opts.type === "new") {
                val = {
                    title: modalTitleInput.value.trim(),
                    rootCategory: modalCategorySelect.value
                };
                if (val.title && val.rootCategory) {
                    cb(val);
                } else {
                    if (!val.title) {
                        modalTitleInput.style.borderColor = "red";
                        return false;
                    }
                    if (!val.rootCategory) {
                        modalCategorySelect.style.borderColor = "red";
                        return false;
                    }
                }
            } else {
                cb(true);
            }
            destroyModal();
        }
    }
    function handleCancel(event) {
        event = event || window.event;
        event.preventDefault ? event.preventDefault() : event.returnValue = false;
        var self = event.currentTarget || event.srcElement || this;
        var keyCode = event.keyCode || event.which || event.charCode || null;
        if (keyCode === 27 || self === modalBg || event.type === "click") {
            destroyModal();
        }
    }
    function destroyModal() {
        $modalOverlay.velocity({
            opacity: 0
        }, {
            duration: 75,
            display: "none"
        });
        removeEvent("click", modalBg, handleCancel);
        if (opts.type === "new") {
            removeEvent("keyup", modalTitleInput, handleOk);
            removeEvent("keyup", modalCategorySelect, handleOk);
            removeEvent("change", modalTitleInput, handleOk);
            removeEvent("change", modalCategorySelect, handleOk);
        }
        removeEvent("click", okButton, handleOk);
        if (opts.showCancelButton) {
            removeEvent("click", cancelButton, handleCancel);
        }
        removeEvent("keyup", document, handleCancel);
        modalOverlay.parentNode.removeChild(modalOverlay);
        modalOverlay = null;
        $modalOverlay = null;
        return false;
    }
}

function init(id, type) {
    reqwest({
        url: "https://kx.afms.mil" + sitePath + "_api/lists/getByTitle('" + type + "')/items/?$filter=Category eq '" + id + "'&$select=ID,Title,Text,References,Category",
        method: "GET",
        type: "json",
        contentType: "application/json",
        withCredentials: true,
        headers: {
            Accept: "application/json;odata=verbose",
            "text-Type": "application/json;odata=verbose",
            "Content-Type": "application/json;odata=verbose"
        },
        success: function(data) {
            var obj = data.d.results[0];
            item = new Item({
                id: obj.ID,
                title: obj.Title || "",
                text: obj.Text || "",
                references: obj.References.results || [],
                category: obj.Category.split("/"),
                contentType: type,
                listItemType: obj.__metadata.type,
                timestamp: Date && Date.now() || new Date()
            });
        },
        error: connError,
        complete: function() {
            render(item);
            if (!CodeMirror) {
                fastdom.write(function() {
                    try {
                        loadingSomething(false, output);
                    } catch (e) {
                        try {
                            loadingSomething(false, contentWrap);
                        } catch (e) {}
                    }
                });
            } else {
                loadingSomething(true, contentWrap);
                var titleField, toggler, cheatSheetButton, deleteButton, create, save, spans = [ document.createElement("span"), document.createElement("span"), document.createElement("span"), document.createElement("span"), document.createElement("span") ], input, cheatSheet, textarea;
                spans[0].appendChild(txt("Toggle Editor"));
                spans[1].appendChild(txt("Cheat Sheet"));
                spans[2].appendChild(txt("Delete"));
                spans[3].appendChild(txt("New"));
                spans[4].appendChild(txt("Save"));
                titleField = document.createElement("input");
                titleField.id = "titleField";
                titleField.value = item.originalTitle;
                titleField.setAttribute("type", "text");
                titleField.setAttribute("tab-index", "1");
                toggler = document.createElement("div");
                toggler.id = "toggler";
                toggler.appendChild(spans[0]);
                toggler.setAttribute("role", "button");
                toggler.className = "btn";
                cheatSheetButton = document.createElement("div");
                cheatSheetButton.id = "cheatSheetButton";
                cheatSheetButton.appendChild(spans[1]);
                cheatSheetButton.setAttribute("role", "button");
                cheatSheetButton.className = "btn";
                deleteButton = document.createElement("div");
                deleteButton.id = "deleteButton";
                deleteButton.appendChild(spans[2]);
                deleteButton.setAttribute("role", "button");
                deleteButton.className = "btn";
                create = document.createElement("div");
                create.id = "create";
                create.appendChild(spans[3]);
                create.setAttribute("role", "button");
                create.className = "btn";
                save = document.createElement("div");
                save.id = "save";
                save.appendChild(spans[4]);
                save.setAttribute("role", "button");
                save.className = "btn";
                addEvent("keyup", titleField, titleEdit);
                addEvent("click", toggler, toggleEditor);
                addEvent("click", cheatSheetButton, toggleCheatSheet);
                addEvent("click", deleteButton, deletePage);
                addEvent("click", create, createPage);
                addEvent("click", save, saveChanges);
                fragment.appendChild(titleField);
                fragment.appendChild(toggler);
                fragment.appendChild(cheatSheetButton);
                fragment.appendChild(deleteButton);
                fragment.appendChild(create);
                fragment.appendChild(save);
                buttons.innerHTML = "";
                buttons.appendChild(fragment);
                cheatSheet = document.createElement("div");
                cheatSheet.id = "cheatSheet";
                cheatSheet.appendChild(txt("Delightful!"));
                textarea = document.createElement("textarea");
                textarea.id = "textarea";
                textarea.appendChild(txt(item.originalText));
                input = document.createElement("div");
                input.id = "input";
                input.appendChild(textarea);
                fragment.appendChild(buttons);
                fragment.appendChild(cheatSheet);
                content.insertBefore(fragment, contentWrap);
                contentWrap.insertBefore(input, output);
                if (!editor) {
                    fastdom.write(function() {
                        editor = CodeMirror.fromTextArea(textarea, {
                            mode: "gfm",
                            lineNumbers: false,
                            matchBrackets: true,
                            lineWrapping: true,
                            theme: "neo",
                            extraKeys: {
                                Enter: "newlineAndIndentContinueMarkdownList"
                            }
                        });
                        editor.on("change", update);
                    });
                    fastdom.defer(function() {
                        loadingSomething(false, contentWrap);
                    });
                }
            }
            function titleEdit() {
                output.innerHTML = md.render("# " + titleField.value + "\n" + item.text);
                item.title = titleField.value;
            }
            function update(e) {
                item.text = e.getValue();
                output.innerHTML = md.render("# " + item.title + "\n" + item.text);
            }
            function saveChanges(event) {
                event = event || window.event;
                event.stopPropagation ? event.stopPropagation() : event.cancelBubble = true;
                event.preventDefault ? event.preventDefault() : event.returnValue = false;
                var self = event.currentTarget || event.srcElement || this;
                if (self.nodeName === "span") {
                    self = self.parentNode;
                }
                item.title = item.title.trim();
                item.text = item.text.trim();
                if (item.text === item.originalText && item.title === item.originalTitle) {
                    if (!regNoChange.test(self.className)) {
                        self.className += " nochange";
                    }
                    self.childNodes[0].innerHTML = "No change";
                    if (buttons.tempSaveText) {
                        clearTimeout(buttons.tempSaveText);
                    }
                    buttons.tempSaveText = setTimeout(function() {
                        self.childNodes[0].innerHTML = "Save";
                        self.className = self.className.replace(regNoChange, "");
                    }, 2e3);
                    return false;
                } else {
                    loadingSomething(true, contentWrap);
                }
                reqwest({
                    url: "https://kx.afms.mil" + sitePath + "_api/lists/getByTitle('" + item.contentType + "')/items(" + item.id + ")",
                    method: "POST",
                    data: JSON.stringify({
                        __metadata: {
                            type: item.listItemType
                        },
                        Title: item.title,
                        Text: item.text
                    }),
                    type: "json",
                    contentType: "application/json",
                    withCredentials: true,
                    headers: {
                        "X-HTTP-Method": "MERGE",
                        Accept: "application/json;odata=verbose",
                        "text-Type": "application/json;odata=verbose",
                        "Content-Type": "application/json;odata=verbose",
                        "X-RequestDigest": digest,
                        "IF-MATCH": "*"
                    },
                    success: function() {
                        newModal({
                            title: "## " + item.title + " updated!",
                            text: "**" + item.category.join("/") + "** has been updated with the changes you just made.",
                            type: "success",
                            showCancelButton: false
                        });
                    },
                    error: connError,
                    complete: function() {
                        loadingSomething(false, contentWrap);
                    }
                });
            }
            function createPage() {
                newModal({
                    title: "## New Page",
                    text: "Give it a name:",
                    type: "new"
                }, function(inputValue) {
                    if ("object" !== typeof inputValue) {
                        return false;
                    }
                    loadingSomething(true, contentWrap);
                    var category = inputValue.rootCategory + "/" + inputValue.title.toCamelCase();
                    reqwest({
                        url: "https://kx.afms.mil" + sitePath + "_api/lists/getByTitle('" + item.contentType + "')/items",
                        method: "POST",
                        data: JSON.stringify({
                            __metadata: {
                                type: item.listItemType
                            },
                            Title: inputValue.title,
                            Text: "## New Page :)",
                            Category: category
                        }),
                        type: "json",
                        contentType: "application/json",
                        withCredentials: true,
                        headers: {
                            Accept: "application/json;odata=verbose",
                            "text-Type": "application/json;odata=verbose",
                            "Content-Type": "application/json;odata=verbose",
                            "X-RequestDigest": digest
                        },
                        success: function() {
                            newModal({
                                title: "## '" + inputValue.title + "' was created",
                                text: "Your page is located at **" + category + "**.\nGo fill it in!",
                                type: "success",
                                okText: "Take me",
                                showCancelButton: false
                            }, function() {
                                router.setRoute(category);
                            });
                        },
                        error: connError,
                        complete: function() {
                            loadingSomething(false, contentWrap);
                        }
                    });
                });
            }
            function deletePage() {
                item.title = item.title.trim();
                var category = item.category.join("/");
                newModal({
                    title: "## DELETE\n**" + item.title + "**, Path: " + category,
                    text: "*You might wanna check with someone first.*\n",
                    type: "warning"
                }, function(choice) {
                    if (choice === false) {
                        return false;
                    }
                    loadingSomething(true, contentWrap);
                    reqwest({
                        url: "https://kx.afms.mil" + sitePath + "_api/lists/getByTitle('" + item.contentType + "')/items(" + item.id + ")",
                        method: "POST",
                        type: "json",
                        contentType: "application/json",
                        withCredentials: true,
                        headers: {
                            "IF-MATCH": "*",
                            "X-HTTP-Method": "DELETE",
                            Accept: "application/json;odata=verbose",
                            "text-Type": "application/json;odata=verbose",
                            "Content-Type": "application/json;odata=verbose",
                            "X-RequestDigest": digest
                        },
                        success: function() {
                            newModal({
                                title: "## " + item.title + " deleted!",
                                text: "**" + category + "** is no longer in use.",
                                type: "success",
                                showCancelButton: false
                            }, function() {
                                item.category.pop();
                                router.setRoute(item.category.join("/"));
                            });
                        },
                        error: connError,
                        complete: function() {
                            loadingSomething(false, contentWrap);
                        }
                    });
                });
            }
            function toggleEditor() {
                if (item.animating === true) {
                    return false;
                }
                item.animating = true;
                var hasFullPage = regFullPage.test(content.className);
                $contentWrap.velocity({
                    opacity: 0
                }, {
                    duration: 50,
                    complete: function() {
                        content.className = hasFullPage ? content.className.replace(regFullPage, "") : content.className + " fullPage";
                        contentWrap.className = "";
                        $contentWrap.velocity({
                            opacity: 1
                        }, {
                            duration: 75,
                            complete: function() {
                                if (hasFullPage) {
                                    editor.refresh();
                                }
                                item.animating = false;
                            }
                        });
                    }
                });
                return false;
            }
            function toggleCheatSheet() {
                if (item.animating === true) {
                    return false;
                }
                item.animating = true;
                var hasCheatSheet = regCheatSheet.test(contentWrap.className);
                $contentWrap.velocity({
                    opacity: 0
                }, {
                    duration: 50,
                    complete: function() {
                        contentWrap.className = hasCheatSheet ? contentWrap.className.replace(regCheatSheet, "") : contentWrap.className + " cheatSheet";
                        $contentWrap.velocity({
                            opacity: 1
                        }, {
                            duration: 75,
                            complete: function() {
                                item.animating = false;
                            }
                        });
                    }
                });
                return false;
            }
        }
    });
}

function navList() {
    pageSetup();
    reqwest({
        url: "https://kx.afms.mil" + sitePath + "_api/lists(guid'4522F7F9-1B5C-4990-9704-991725DEF693')/items/?$select=Title,Category",
        method: "GET",
        type: "json",
        contentType: "application/json",
        withCredentials: true,
        headers: {
            Accept: "application/json;odata=verbose",
            "text-Type": "application/json;odata=verbose",
            "Content-Type": "application/json;odata=verbose"
        },
        success: function(data) {
            var page, optionTmp, fragment = document.createDocumentFragment(), group = document.createElement("optgroup");
            menuItems = document.createElement("select");
            while (page = data.d.results.shift()) {
                pages[page.Category] = page.Title;
                optionTmp = document.createElement("option");
                optionTmp.innerHTML = page.Title;
                optionTmp.value = page.Category;
                fragment.appendChild(optionTmp);
            }
            group.label = "Public Health";
            group.appendChild(fragment);
            menuItems.appendChild(group);
        },
        error: connError
    });
}

function resetPage() {
    try {
        var editWrap = editor.getWrapperElement();
        editWrap.parentNode.removeChild(editWrap);
        editor = null;
    } catch (e) {}
    try {
        destroyModal();
    } catch (e) {
        try {
            modalOverlay.parentNode.removeChild(modalOverlay);
            modalOverlay = null;
        } catch (e) {}
    }
    try {
        content.className = "fullPage";
        contentWrap.className = "";
    } catch (e) {}
}

var router = Router({
    "/(fhm|comm)": {
        "/(\\w+)": {
            "/(content|faq|forms|resources)": {
                once: navList,
                on: function(root, sub, type) {
                    console.log("--3: root = " + root + " / sub = " + sub + " / type = " + type);
                    loadingSomething(true, output);
                    init("/" + root + "/" + sub, type ? type : "Content");
                }
            },
            once: navList,
            on: function(root, sub) {
                var keys = Object.keys(pages);
                var path = keys.indexOf(root);
                console.log("--2: root start = " + root + " / sub start = " + sub);
                if (path > -1) {
                    root = keys[path];
                } else {
                    root = "/" + root + "/" + sub;
                    sub = "Content";
                }
                console.log("--2: root transform = " + root + " / sub transform? = " + sub);
                loadingSomething(true, output);
                init(root, sub);
            }
        },
        once: navList,
        on: function(root) {
            var keys = Object.keys(pages);
            var path = keys.indexOf(root);
            console.log("1: root start = " + root);
            if (keys && keys.length > 1 && path > -1) {
                root = keys[path];
            } else if (!keys) {
                console.log("race condition exists.  site nav list is too slow vs. this route handler");
                return false;
            } else {
                console.log("location unavailable - this is the level 1 route handler");
                return false;
            }
            console.log("1: root transform = " + root);
            loadingSomething(true, output);
            init(root, "Content");
        }
    }
}).configure({
    strict: false,
    html5history: true,
    after: resetPage,
    notfound: function() {
        console.log("location unavailable - this is the notfound handler");
    }
});

router.init();

function render(content) {
    return h("#wrapper", {}, h("#content", {
        className: "fullPage"
    }, h("#buttons", {}), h("#contentWrap", {}, h("#output", {}, md("# " + content.title + "\n" + content.text)))));
}

var dirtyDOM = render(item);

var rootNode = createElement(dirtyDOM);

pageSetup(rootNode);