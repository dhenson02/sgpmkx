(function(window, document, $, reqwest, Router) {
    "use strict";
    function txt(string) {
        if (typeof string === "string" && string.length > 0) {
            return document.createTextNode(string);
        }
    }
    function addEvent(evt, element, fnc) {
        return element.addEventListener ? element.addEventListener(evt, fnc, false) : element.attachEvent("on" + evt, fnc);
    }
    function removeEvent(evt, element, fnc) {
        return element.removeEventListener ? element.removeEventListener(evt, fnc, false) : element.detachEvent("on" + evt, fnc);
    }
    function loadingSomething(status, target, override) {
        if (status === true) {
            if (item.inTransition[target] === true && override !== true) {
                return false;
            }
            item.inTransition[target] = true;
            if (regLoading.test(target.className) === false) {
                target.className += " loading";
            }
        } else {
            setTimeout(function() {
                item.inTransition[target] = false;
                target.className = target.className.replace(regLoading, "");
            }, 200);
        }
    }
    try {
        var leftNav = document.getElementById("leftnav");
        leftNav.parentNode.removeChild(leftNav);
    } catch (e) {}
    var regLoading = / ?loading/g, regFullPage = / ?fullPage/g, regCheatSheet = / ?cheatSheet/g, regNoChange = / ?nochange/g, baseURL = "https://kx.afms.mil/kj/kx7/PublicHealth/Pages/contentManagerTest2.aspx", sitePath = "/kj/kx7/PublicHealth/", siteList = "lists(guid'4522F7F9-1B5C-4990-9704-991725DEF693')", listItemType = "SP.Data.ContentListItem", wrapper = document.createElement("div"), content = document.createElement("div"), contentWrap = document.createElement("div"), output = document.createElement("div"), modalOverlay = document.createElement("div"), fragment = document.createDocumentFragment(), digest = document.getElementById("__REQUESTDIGEST").value, md = markdownit({
        highlight: function(code, lang) {
            if (lang && hljs.getLanguage(lang)) {
                try {
                    return hljs.highlight(lang, code).value;
                } catch (e) {}
            }
            return "";
        }
    }), pages = {}, item = {
        id: null,
        title: "",
        originalText: "",
        text: "",
        references: [],
        category: [],
        timestamp: null,
        editor: false,
        inTransition: {},
        animating: false
    }, pageviewCSS = document.createElement("link"), editorCSS = document.createElement("link"), head = document.getElementsByTagName("head")[0], $contentWrap = $(contentWrap), buttons = null, editor, wrapperTmp;
    editorCSS.type = "text/css";
    editorCSS.rel = "stylesheet";
    editorCSS.href = sitePath + "Pages/Dev/editor.min.css";
    pageviewCSS.type = "text/css";
    pageviewCSS.rel = "stylesheet";
    pageviewCSS.href = sitePath + "SiteAssets/Styles/pageview.min.css";
    head.appendChild(pageviewCSS);
    head.appendChild(editorCSS);
    wrapper.id = "wrapper";
    content.id = "content";
    contentWrap.id = "contentWrap";
    output.id = "output";
    output.innerHTML = md.render("# " + item.title + "\n" + item.originalText);
    modalOverlay.className = "modalOverlay";
    contentWrap.appendChild(output);
    content.appendChild(contentWrap);
    content.className = "fullPage";
    wrapper.appendChild(content);
    try {
        wrapperTmp = document.getElementById("wrapper");
        wrapperTmp.parentNode.replaceChild(wrapper, wrapperTmp);
    } catch (e) {
        try {
            wrapperTmp = document.getElementById("ctl00_PlaceHolderMain_ctl00__ControlWrapper_RichHtmlField");
            wrapperTmp.style.display = "none";
            wrapperTmp.parentNode.appendChild(wrapper);
        } catch (err) {
            document.body.appendChild(wrapper);
        }
    }
    function newModal(options, cb) {
        if ("function" !== typeof cb) {
            cb = null;
        }
        function handleOk(event) {
            event = event || window.event;
            event.preventDefault ? event.preventDefault() : event.returnValue = false;
            var keyCode = event.keyCode || event.which || event.charCode || null;
            if (cb && keyCode === 13 || event.type === "click") {
                if (modalInput) {
                    val = modalInput.value.trim();
                    if (!val) {
                        modalInput.style.borderColor = "red";
                        return false;
                    } else {
                        cb(val);
                    }
                } else {
                    var val = true;
                    cb(val);
                }
            }
            closeOverlay();
        }
        function handleCancel(event) {
            event = event || window.event;
            event.preventDefault ? event.preventDefault() : event.returnValue = false;
            var self = event.currentTarget || event.srcElement || this;
            var keyCode = event.keyCode || event.which || event.charCode || null;
            if (keyCode === 27 || self === modalBg || event.type === "click") {
                closeOverlay();
            }
        }
        function closeOverlay() {
            $modalOverlay.velocity({
                opacity: 0
            }, {
                duration: 75,
                display: "none"
            });
            removeEvent("click", okButton, handleOk);
            if (opts.showCancelButton) {
                removeEvent("click", cancelButton, handleCancel);
            }
            removeEvent("click", modalBg, handleCancel);
            if (modalInput) {
                removeEvent("keyup", modalInput, handleOk);
            }
            removeEvent("keyup", document, handleCancel);
            return false;
        }
        var modalInput, modalOverlay = document.createElement("div"), $modalOverlay = $(modalOverlay), modalBg = document.createElement("div"), header = document.createElement("div"), label = document.createElement("label"), contentModal = document.createElement("div"), modalButtons = document.createElement("div"), okButton = document.createElement("div"), okSpan = document.createElement("span"), cancelButton = document.createElement("div"), cancelSpan = document.createElement("span"), opts = {
            title: md.render(options.title || "## Info"),
            text: md.render(options.text || "Click OK to continue"),
            type: options.type || "success",
            showCancelButton: typeof options.showCancelButton === "boolean" ? options.showCancelButton : true,
            closeOnConfirm: typeof options.closeOnConfirm === "boolean" ? options.closeOnConfirm : true
        };
        modalOverlay.id = "modalOverlay";
        modalOverlay.className = "modalOverlay " + opts.type;
        modalBg.id = "modalBg";
        modalBg.className = "modalBg";
        contentModal.id = "contentModal";
        contentModal.className = "contentModal";
        header.className = "header";
        okButton.className = "btn";
        okButton.id = "okButton";
        modalButtons.className = "modalButtons";
        header.innerHTML = opts.title;
        label.innerHTML = opts.text;
        contentModal.appendChild(header);
        contentModal.appendChild(label);
        if (opts.type === "input") {
            modalInput = document.createElement("input");
            modalInput.id = "modalInput";
            modalInput.name = "modalInput";
            modalInput.setAttribute("type", "text");
            modalInput.setAttribute("tab-index", "0");
            modalInput.setAttribute("autofocus", "");
            contentModal.appendChild(modalInput);
            label.setAttribute("for", "modalInput");
        }
        okSpan.appendChild(txt("OK!"));
        okButton.appendChild(okSpan);
        modalButtons.appendChild(okButton);
        if (opts.showCancelButton !== false) {
            cancelSpan.appendChild(txt("Nope."));
            cancelButton.className = "btn";
            cancelButton.id = "cancelButton";
            cancelButton.appendChild(cancelSpan);
            modalButtons.appendChild(cancelButton);
        }
        contentModal.appendChild(modalButtons);
        modalOverlay.appendChild(modalBg);
        modalOverlay.appendChild(contentModal);
        addEvent("click", okButton, handleOk);
        if (opts.showCancelButton !== false) {
            addEvent("click", cancelButton, handleCancel);
        }
        addEvent("click", modalBg, handleCancel);
        if (modalInput) {
            addEvent("keyup", modalInput, handleOk);
        }
        addEvent("keyup", document, handleCancel);
        content.appendChild(modalOverlay);
        $modalOverlay.velocity({
            opacity: 1
        }, {
            duration: 75,
            display: "block"
        });
        if (modalInput) {
            modalInput.focus();
        }
        return true;
    }
    function updateTitle(title) {
        output.innerHTML = md.render("# " + title + "\n" + item.text);
    }
    function update(e) {
        item.text = e.getValue();
        output.innerHTML = md.render("# " + item.title + "\n" + item.text);
    }
    function init(id, contentType) {
        contentType = contentType || "content";
        id = id === "/" && contentType !== "content" ? "" : "$filter=Category eq '" + id + "'";
        reqwest({
            url: "https://kx.afms.mil" + sitePath + "_api/lists/getByTitle('" + contentType + "')/items/?" + id,
            method: "GET",
            type: "json",
            contentType: "application/json",
            withCredentials: true,
            headers: {
                Accept: "application/json;odata=verbose",
                "text-Type": "application/json;odata=verbose",
                "Content-Type": "application/json;odata=verbose"
            },
            success: function(data) {
                var obj = data.d.results[0];
                item.id = obj.ID;
                item.originalTitle = obj.Title || "";
                item.originalText = obj.Text || "";
                item.references = obj.References.results || [];
                item.timestamp = Date && Date.now() || new Date();
                item.category = obj.Category.split("/");
                item.contentType = contentType;
                item.text = item.originalText;
                item.title = item.originalTitle;
            },
            error: function(error) {
                console.log("error connecting - " + error);
            },
            complete: function() {
                output = document.createElement("div");
                output.id = "output";
                fastdom.write(function() {
                    output.innerHTML = md.render("# " + item.originalTitle + "\n" + item.originalText);
                    loadingSomething(false, output);
                });
                if (CodeMirror) {
                    var addButtons = function() {
                        function titleEdit(event) {
                            event = event || window.event;
                            event.stopPropagation ? event.stopPropagation() : event.cancelBubble = true;
                            event.preventDefault ? event.preventDefault() : event.returnValue = false;
                            var self = event.currentTarget || event.srcElement || this;
                            item.title = self.value.trim();
                            updateTitle(item.title);
                        }
                        function saveChanges(event) {
                            event = event || window.event;
                            event.stopPropagation ? event.stopPropagation() : event.cancelBubble = true;
                            event.preventDefault ? event.preventDefault() : event.returnValue = false;
                            var self = event.currentTarget || event.srcElement || this;
                            if (self.nodeName === "span") {
                                self = self.parentNode;
                            }
                            item.title = item.title.trim();
                            if (item.text === item.originalText) {
                                if (!regNoChange.test(self.className)) {
                                    self.className += " nochange";
                                }
                                self.childNodes[0].innerHTML = "No change";
                                if (buttons.tempSaveText) {
                                    clearTimeout(buttons.tempSaveText);
                                }
                                buttons.tempSaveText = setTimeout(function() {
                                    self.childNodes[0].innerHTML = "Save";
                                    self.className = self.className.replace(regNoChange, "");
                                }, 2e3);
                                return false;
                            } else {
                                loadingSomething(true, self);
                            }
                            reqwest({
                                url: "https://kx.afms.mil" + sitePath + "_api/" + siteList + "/items(" + item.id + ")",
                                method: "POST",
                                data: JSON.stringify({
                                    __metadata: {
                                        type: listItemType
                                    },
                                    Title: item.title,
                                    Text: item.text
                                }),
                                type: "json",
                                contentType: "application/json",
                                withCredentials: true,
                                headers: {
                                    "X-HTTP-Method": "MERGE",
                                    Accept: "application/json;odata=verbose",
                                    "text-Type": "application/json;odata=verbose",
                                    "Content-Type": "application/json;odata=verbose",
                                    "X-RequestDigest": digest,
                                    "IF-MATCH": "*"
                                },
                                success: function() {
                                    newModal({
                                        title: "## " + item.title + " updated!",
                                        text: "**" + item.category.join("/") + "** has been updated with the changes you just made.",
                                        type: "success",
                                        showCancelButton: false
                                    });
                                },
                                error: function(error) {
                                    console.error(error);
                                    newModal({
                                        title: "## Bummer - Update/Save",
                                        text: "Something went wrong.  Check the console (hit F12)",
                                        type: "error"
                                    });
                                },
                                complete: function() {
                                    loadingSomething(false, self);
                                }
                            });
                        }
                        function createPage(event) {
                            event = event || window.event;
                            var self = event.currentTarget || event.srcElement || this;
                            newModal({
                                title: "## New Page",
                                text: "Give it a name:",
                                type: "input"
                            }, function(inputValue) {
                                if (inputValue === "" || inputValue === true) {
                                    newModal({
                                        title: "## Error",
                                        text: "Please enter a title.",
                                        type: "error",
                                        showCancelButton: false
                                    });
                                    return false;
                                }
                                return false;
                                loadingSomething(true, self);
                                reqwest({
                                    url: "https://kx.afms.mil" + sitePath + "_api/" + siteList + "/items",
                                    method: "POST",
                                    data: JSON.stringify({
                                        __metadata: {
                                            type: listItemType
                                        },
                                        Title: inputValue,
                                        Text: "## New Page :)",
                                        Category: ""
                                    }),
                                    type: "json",
                                    contentType: "application/json",
                                    withCredentials: true,
                                    headers: {
                                        Accept: "application/json;odata=verbose",
                                        "text-Type": "application/json;odata=verbose",
                                        "Content-Type": "application/json;odata=verbose",
                                        "X-RequestDigest": digest
                                    },
                                    success: function() {
                                        newModal({
                                            title: "## Congratulations!",
                                            text: "Your page, **" + inputValue + "** has been made.  Now go fill it in!",
                                            type: "success",
                                            showCancelButton: false
                                        }, function() {
                                            window.location.href = baseURL + "#/" + inputValue;
                                        });
                                    },
                                    error: function(error) {
                                        console.error(error);
                                        newModal({
                                            title: "## Bummer - Create",
                                            text: "Something went wrong.  Check the console (hit F12)",
                                            type: "error"
                                        });
                                    },
                                    complete: function() {
                                        loadingSomething(false, self);
                                    }
                                });
                            });
                        }
                        function deletePage(event) {
                            event = event || window.event;
                            var self = event.currentTarget || event.srcElement || this;
                            item.title = item.title.trim();
                            newModal({
                                title: "## DELETE PAGE\n **" + item.title + "**, ID: " + item.id,
                                text: "If you aren't sure, *you might wanna check with someone first.*\nOtherwise, go for it!",
                                type: "warning"
                            }, function(choice) {
                                if (choice === false) {
                                    return false;
                                }
                                loadingSomething(true, self);
                                reqwest({
                                    url: "https://kx.afms.mil" + sitePath + "_api/" + siteList + "/items(" + item.id + ")",
                                    method: "POST",
                                    type: "json",
                                    contentType: "application/json",
                                    withCredentials: true,
                                    headers: {
                                        "IF-MATCH": "*",
                                        "X-HTTP-Method": "DELETE",
                                        Accept: "application/json;odata=verbose",
                                        "text-Type": "application/json;odata=verbose",
                                        "Content-Type": "application/json;odata=verbose",
                                        "X-RequestDigest": digest
                                    },
                                    success: function() {
                                        newModal({
                                            title: "## Page deleted!",
                                            text: "**" + item.title + "** has been deleted.  OK, bye.",
                                            type: "success"
                                        }, function(otherChoice) {
                                            if (otherChoice !== false) {
                                                var a = document.createElement("a");
                                                a.target = "_blank";
                                                a.href = "https://en.wikipedia.org/wiki/Special:Random";
                                                content.appendChild(a);
                                                a.click();
                                            }
                                            window.location.href = baseURL;
                                        });
                                    },
                                    error: function(error) {
                                        console.error(error);
                                        newModal({
                                            title: "## Bummer - Delete",
                                            text: "Something went wrong.  Check the console (hit F12)",
                                            type: "error",
                                            showCancelButton: false
                                        });
                                    },
                                    complete: function() {
                                        loadingSomething(false, self);
                                    }
                                });
                            });
                        }
                        function toggleEditor() {
                            if (item.animating === true) {
                                return false;
                            }
                            item.animating = true;
                            var hasFullPage = regFullPage.test(content.className);
                            $contentWrap.velocity({
                                opacity: 0
                            }, {
                                duration: 50,
                                complete: function() {
                                    content.className = hasFullPage ? content.className.replace(regFullPage, "") : content.className + " fullPage";
                                    $contentWrap.velocity({
                                        opacity: 1
                                    }, {
                                        duration: 75,
                                        complete: function() {
                                            if (hasFullPage) {
                                                editor.refresh();
                                            }
                                            item.animating = false;
                                        }
                                    });
                                }
                            });
                            return false;
                        }
                        function toggleCheatSheet() {
                            if (item.animating === true) {
                                return false;
                            }
                            item.animating = true;
                            var hasCheatSheet = regCheatSheet.test(input.className);
                            $input.velocity({
                                opacity: 0
                            }, {
                                duration: 50,
                                complete: function() {
                                    input.className = hasCheatSheet ? input.className.replace(regCheatSheet, "") : input.className + " cheatSheet";
                                    $input.velocity({
                                        opacity: 1
                                    }, {
                                        duration: 75,
                                        complete: function() {
                                            editor.refresh();
                                            item.animating = false;
                                        }
                                    });
                                }
                            });
                            return false;
                        }
                        var buttonsWrapper = document.createElement("div"), toggler = document.createElement("div"), cheatSheetButton = document.createElement("div"), deleteButton = document.createElement("div"), create = document.createElement("div"), save = document.createElement("div"), titleField = document.createElement("input"), spans = [ document.createElement("span"), document.createElement("span"), document.createElement("span"), document.createElement("span"), document.createElement("span") ];
                        toggler.id = "toggler";
                        cheatSheetButton.id = "cheatSheetButton";
                        deleteButton.id = "deleteButton";
                        create.id = "create";
                        save.id = "save";
                        titleField.id = "titleField";
                        buttonsWrapper.id = "buttonsWrap";
                        spans[0].appendChild(txt("Toggle Editor"));
                        spans[1].appendChild(txt("Cheat Sheet"));
                        spans[2].appendChild(txt("Delete"));
                        spans[3].appendChild(txt("New"));
                        spans[4].appendChild(txt("Save"));
                        titleField.value = item.originalTitle;
                        toggler.appendChild(spans[0]);
                        cheatSheetButton.appendChild(spans[1]);
                        deleteButton.appendChild(spans[2]);
                        create.appendChild(spans[3]);
                        save.appendChild(spans[4]);
                        toggler.setAttribute("role", "button");
                        cheatSheetButton.setAttribute("role", "button");
                        deleteButton.setAttribute("role", "button");
                        create.setAttribute("role", "button");
                        save.setAttribute("role", "button");
                        titleField.setAttribute("type", "text");
                        titleField.setAttribute("tab-index", "1");
                        toggler.className = "btn";
                        cheatSheetButton.className = "btn";
                        deleteButton.className = "btn";
                        create.className = "btn";
                        save.className = "btn";
                        buttonsWrapper.appendChild(titleField);
                        buttonsWrapper.appendChild(toggler);
                        buttonsWrapper.appendChild(cheatSheetButton);
                        buttonsWrapper.appendChild(deleteButton);
                        buttonsWrapper.appendChild(create);
                        buttonsWrapper.appendChild(save);
                        addEvent("keyup", titleField, titleEdit);
                        addEvent("click", toggler, toggleEditor);
                        addEvent("click", cheatSheetButton, toggleCheatSheet);
                        addEvent("click", deleteButton, deletePage);
                        addEvent("click", create, createPage);
                        addEvent("click", save, saveChanges);
                        return buttonsWrapper;
                    };
                    var input = document.createElement("div"), cheatSheet = document.createElement("div"), $input = $(input), textarea = document.createElement("textarea");
                    input.id = "input";
                    textarea.id = "textarea";
                    cheatSheet.className = "cheatSheet";
                    cheatSheet.appendChild(txt("Delightful!"));
                    textarea.appendChild(txt(item.originalText));
                    input.appendChild(cheatSheet);
                    input.appendChild(textarea);
                    fragment.appendChild(input);
                    fragment.appendChild(output);
                    fastdom.read(function() {
                        contentWrap.innerHTML = "";
                    });
                    fastdom.write(function() {
                        if (buttons === null) {
                            buttons = addButtons();
                            content.insertBefore(buttons, contentWrap);
                        }
                        contentWrap.appendChild(fragment);
                    });
                    if (!editor) {
                        fastdom.write(function() {
                            editor = CodeMirror.fromTextArea(textarea, {
                                mode: "gfm",
                                lineNumbers: false,
                                matchBrackets: true,
                                lineWrapping: true,
                                theme: "mdn-like",
                                extraKeys: {
                                    Enter: "newlineAndIndentContinueMarkdownList"
                                }
                            });
                            editor.on("change", update);
                        });
                    }
                }
            }
        });
    }
    function navList() {
        reqwest({
            url: "https://kx.afms.mil" + sitePath + "_api/" + siteList + "/items/?$select=Title,Category",
            method: "GET",
            type: "json",
            contentType: "application/json",
            withCredentials: true,
            headers: {
                Accept: "application/json;odata=verbose",
                "text-Type": "application/json;odata=verbose",
                "Content-Type": "application/json;odata=verbose"
            },
            success: function(data) {
                var page;
                while (page = data.d.results.shift()) {
                    pages[page.Category] = page.Title;
                }
            },
            error: function(error) {
                console.log("error connecting - " + error);
            }
        });
    }
    var router = Router({
        "/(\\w+)": {
            once: navList,
            on: function(prefix) {
                loadingSomething(true, content);
                init("/", prefix);
            },
            after: function() {
                var editWrap = editor.getWrapperElement();
                editWrap.parentNode.removeChild(editWrap);
                editor = null;
            }
        },
        "/fhm": {
            "/(\\w+)": {
                once: navList,
                on: function(where) {
                    this.rt = where;
                    console.log("this.rt init: " + this.rt);
                    loadingSomething(true, output);
                    init("/fhm/" + where);
                },
                after: function() {
                    var editWrap = editor.getWrapperElement();
                    editWrap.parentNode.removeChild(editWrap);
                    editor = null;
                }
            },
            on: function(where) {
                this.rt += where;
                console.log("this.rt now: " + this.rt);
            }
        },
        "/comm": {
            "/(\\w+)": {
                once: navList,
                on: function(where) {
                    loadingSomething(true, output);
                    init("/comm/" + where);
                },
                after: function() {
                    var editWrap = editor.getWrapperElement();
                    editWrap.parentNode.removeChild(editWrap);
                    editor = null;
                }
            }
        }
    }).configure({
        run_handler_in_init: true,
        strict: false
    });
    router.init();
})(window, document, jQuery, reqwest, Router);